

CREATE COMPUTE MODULE getEmployees_getAllEmployees
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		Set OutputRoot.JSON.Data.EmployeeResponse.DBResp.RowsRetrieved = 0;
		Set OutputRoot.JSON.Data.EmployeeResponse.DBResp.RowsAdded = 0;
		Set OutputRoot.JSON.Data.EmployeeResponse.DBResp.RowsUpdated = 0;
		Set OutputRoot.JSON.Data.EmployeeResponse.DBResp.RowsDeleted = 0;
		Set OutputRoot.JSON.Data.EmployeeResponse.DBResp.SQLCODE_Errorcode = 0;
		Set OutputRoot.JSON.Data.EmployeeResponse.DBResp.SQLSTATE_SQLState = '';
		Set OutputRoot.JSON.Data.EmployeeResponse.DBResp.SQL_Error_Message = '';
		
		IF InputLocalEnvironment.REST.Input.Parameters.employeeNumber <> '' THEN
			--retrieve matching rows based on employeeNumber
			
            SET OutputRoot.JSON.Data.EmployeeResponse.Employee[] = (SELECT
               E.*
               FROM Database.IIBADMIN.EMPLOYEE AS E
               WHERE E.EMPNO LIKE '%'||InputLocalEnvironment.REST.Input.Parameters.employeeNumber||'%');
               -- For Exact Match use the following instead... 
               --WHERE E.EMPNO = InputLocalEnvironment.REST.Input.Parameters.employeeNumber);
		ELSE 
			-- retrieve all rows 		
            SET OutputRoot.JSON.Data.EmployeeResponse.Employee[] = (SELECT
		        R.* 
		        FROM Database.HRDB.IIBADMIN.EMPLOYEE AS R);
		END IF;
		   
	    IF SQLCODE = 0 THEN 
          Set OutputRoot.JSON.Data.EmployeeResponse.DBResp.RowsRetrieved = CARDINALITY(OutputRoot.JSON.Data.EmployeeResponse.Employee[]);
		END IF;
        
        Set OutputRoot.JSON.Data.EmployeeResponse.DBResp.SQLCODE_Errorcode = SQLCODE;
		Set OutputRoot.JSON.Data.EmployeeResponse.DBResp.SQLSTATE_SQLState = SQLSTATE;
		Set OutputRoot.JSON.Data.EmployeeResponse.DBResp.SQL_Error_Message = SQLERRORTEXT;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
